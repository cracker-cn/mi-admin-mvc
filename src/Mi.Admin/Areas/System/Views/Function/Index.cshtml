@{
    Layout = "_ElementUiPlusLayout";
}

<el-card shadow="never">
    <el-form :inline="true" :model="form">
        <el-form-item label="功能名称">
            <el-input v-model="form.functionName" placeholder="请输入功能名称" />
        </el-form-item>
        <el-form-item label="访问地址">
            <el-input v-model="form.url" placeholder="请输入访问地址" />
        </el-form-item>
        <el-form-item>
            <el-button type="primary" @@click="onQuery"><el-icon><Search /></el-icon>&nbsp;查询</el-button>
            <el-button @@click="resetQuery"><el-icon><Refresh /></el-icon>&nbsp;重置</el-button>
        </el-form-item>
    </el-form>
</el-card>

<el-card class="mt-1" shadow="never">
    <el-row class="mb-4">
        <el-button type="primary" @@click="editDialog=true"><el-icon><Plus /></el-icon>&nbsp;新增</el-button>
        <el-button type="danger" @@click="batchRemove"><el-icon><Delete /></el-icon>&nbsp;批量删除</el-button>
        <el-button type="primary" @@click="expand(true)"><el-icon><Expand /></el-icon>&nbsp;展开</el-button>
        <el-button type="primary" @@click="expand(false)"><el-icon><Fold /></el-icon>&nbsp;折叠</el-button>
    </el-row>
    <el-table class="mt-1" :data="tableData" ref="table" :empty-text="emptyText"
              row-key="id" :expand-row-keys="expandKeys">
        <el-table-column type="selection" width="55"></el-table-column>
        <el-table-column prop="functionName" label="功能名称"></el-table-column>
        <el-table-column prop="functionType" label="类型">
            <template #default="scope">
                <el-tag v-if="scope.row.functionType == 10" type="success">菜单</el-tag>
                <el-tag v-else-if="scope.row.functionType == 20" type="warning">按钮</el-tag>
                <el-tag v-else-if="scope.row.functionType == 30" type="info">资源</el-tag>
                <el-tag v-else-if="scope.row.functionType == 40">功能</el-tag>
            </template>
        </el-table-column>
        <el-table-column prop="icon" label="图标">
            <template #default="scope">
                <i v-if="scope.row.icon" :class="scope.row.icon"></i>
                <span v-else>--</span>
            </template>
        </el-table-column>
        <el-table-column prop="url" label="访问地址" min-width="150"></el-table-column>
        <el-table-column prop="authorizationCode" label="授权码"></el-table-column>
        <el-table-column prop="sort" label="排序"></el-table-column>
        <el-table-column label="操作">
            <template #default="scope">
                <el-button size="small" @@click="handleEdit(scope.row)">编辑</el-button>
                <el-button size="small"
                           type="danger"
                           @@click="handleDelete(scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>
</el-card>

<el-dialog v-model="editDialog"
           :title="updateId <=0 ? '新增':'编辑'"
           width="80%" :before-close="beforeClose"
           align-center>
    <el-form :model="editForm" label-width="120px" :rules="rules" ref="editFormRef">
        <el-form-item label="上级">
            <el-tree-select node-key="value" value-key="value" v-model="editForm.parentId" show-checkbox
                            :check-strictly=true clearable :filter-method="filterMethod" filterable
                            :data="filterTree" :render-after-expand="false" :props="{label:'name',children:'children'}" />
        </el-form-item>
        <el-form-item label="名称" prop="functionName">
            <el-input v-model="editForm.functionName" />
        </el-form-item>
        <el-form-item label="类型" prop="functionType">
            <el-radio-group v-model="editForm.functionType">
                <el-radio :label="10">菜单</el-radio>
                <el-radio :label="20">按钮</el-radio>
                <el-radio :label="30">资源</el-radio>
                <el-radio :label="40">功能</el-radio>
            </el-radio-group>
        </el-form-item>
        <el-form-item label="地址">
            <el-input v-model="editForm.url" />
        </el-form-item>
        <el-form-item label="图标" v-if="editForm.functionType == 10">
            <el-input v-model="editForm.icon" />
        </el-form-item>
        <el-form-item label="排序">
            <el-input-number v-model="editForm.sort" :min="1" :max="999" />
        </el-form-item>
        <el-form-item label="授权码">
            <el-input v-model="editForm.authorizationCode" />
        </el-form-item>
    </el-form>
    <template #footer>
        <span class="dialog-footer">
            <el-button type="primary" @@click="onSubmit">
                确认
            </el-button>
        </span>
    </template>
</el-dialog>

@section Scripts{
    <script>
        const ROOT_PATH = '/System/Function/';
        const App = {
            data() {
                return {
                    treeData: [],
                    form: {},
                    emptyText: '无数据',
                    expandKeys: [],
                    allKeys: [],
                    tableData: [],
                    updateId: 0,
                    editDialog: false,
                    editForm: {
                        sort: 1,
                        functionType: 10
                    },
                    value: '',
                    rules: {
                        functionName: [
                            { required: true, message: '功能名称不能为空', trigger: 'blur' },
                        ],
                        functionType: [
                            { required: true, message: '功能类型不能为空', trigger: 'blur' },
                        ]
                    }
                };
            },
            computed: {
                filterTree() {
                    if (this.value) {
                        return [...this.treeData].filter(item => item.Name.includes(this.value))
                    }
                    return this.treeData
                }
            },
            methods: {
                handleEdit(row) {
                    this.updateId = row.id
                    Object.assign(this.editForm, row)
                    if (this.editForm.parentId == 0) {
                        this.editForm.parentId = null
                    }
                    this.editDialog = true
                },
                handleDelete(row, ids) {
                    ElementPlus.ElMessageBox.confirm(
                        '操作不可撤回，是否继续？',
                        '提示',
                        {
                            confirmButtonText: '确定',
                            cancelButtonText: '取消',
                            type: 'warning',
                        }
                    )
                        .then(() => {
                            axios.post(ROOT_PATH + 'RemoveFunction', Qs.stringify({ ids: row.id || ids }))
                                .then(res => {
                                    if (res.data.code === 90001) {
                                        ElementPlus.ElMessage.success(res.data.message)
                                        this.fetchTableData();
                                    } else {
                                        ElementPlus.ElMessage.error(res.data.message)
                                    }
                                })
                        }).catch(() => {
                            ElementPlus.ElMessage({
                                type: 'info',
                                message: '取消操作',
                            })
                        })
                },
                batchRemove() {
                    var ids = this.$refs['table'].getSelectionRows().map(x => x.id);
                    if (ids.length <= 0) {
                        ElementPlus.ElMessage.warning("至少选择一行数据")
                        return
                    }
                    this.handleDelete({}, ids)
                },
                expand(flag) {
                    this.expandKeys = flag ? this.allKeys : []
                },
                onSubmit() {
                    this.$refs['editFormRef'].validate((valid, fields) => {
                        if (valid) {
                            axios.post(ROOT_PATH + 'AddOrUpdateFunction', this.editForm)
                                .then(res => {
                                    if (res.data.code === 90001) {
                                        ElementPlus.ElMessage.success(res.data.message)
                                        this.closeDialogAndRefresh()
                                    } else {
                                        ElementPlus.ElMessage.error(res.data.message)
                                    }
                                })
                        } else {
                            console.log(fields)
                            ElementPlus.ElMessage.warning('表单项验证失败')
                        }
                    })
                },
                onQuery() {
                    this.fetchTableData()
                },
                resetQuery() {
                    this.form = {}
                    this.fetchTableData()
                    this.expand(false)
                },
                fetchTableData() {
                    axios.get(ROOT_PATH + 'GetFunctionList?' + Qs.stringify(this.form))
                        .then(res => {
                            if (res.data.code == 90001) {
                                this.tableData = res.data.result
                                this.allKeys = this.tableData.map(x => x.id)
                            } else {
                                this.emptyText = res.data.message
                            }
                        })
                },
                fetchTreeData(){
                    axios.post(ROOT_PATH + 'GetFunctionTree')
                        .then(res => {
                            if (res.status == 200) {
                                this.treeData = res.data
                            } else {
                                console.error(res)
                            }
                        })
                },
                closeDialogAndRefresh() {
                    this.beforeClose()
                    this.fetchTableData();
                    this.fetchTreeData();
                },
                beforeClose() {
                    if (this.$refs['editFormRef']) {
                        this.$refs['editFormRef'].resetFields()
                    }
                    this.editForm = {
                        sort: 1,
                        functionType: 10
                    }
                    this.editDialog = false;
                },
                filterMethod(value) {
                    this.value = value
                }
            },
            created() {
                this.fetchTableData()
                this.fetchTreeData()
            }
        };
    </script>
}